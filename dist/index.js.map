{"version":3,"sources":["../src/index.ts","../src/adapters/authWindow.ts","../src/utils.ts","../src/adapters/cryptography.ts","../src/adapters/tokens.ts","../src/adapters/authAPI.ts","../src/library/handlers.ts","../src/library/index.ts"],"sourcesContent":["import authWindowAdapter from './adapters/authWindow';\nimport cryptographyAdapter from './adapters/cryptography';\nimport tokensAdapter from './adapters/tokens';\nimport authAPIAdapter from './adapters/authAPI';\nimport { IConfig } from './types';\nimport { mergeAdapters } from './utils';\nimport initLibrary from './library/index';\n\nexport default function authConfig(config: IConfig) {\n  const adapter = mergeAdapters(\n    authWindowAdapter,\n    cryptographyAdapter,\n    tokensAdapter,\n    authAPIAdapter\n  );\n\n  return initLibrary(adapter, config);\n}","import { BrowserWindow, BrowserWindowConstructorOptions } from 'electron';\nimport qs from 'qs';\nimport url from 'url';\nimport { Adapter } from '../types';\nimport { context } from '../utils';\n\nconst authWindowAdapter: Adapter = (config) => {\n  const baseWindowConfig: BrowserWindowConstructorOptions = {\n    width: 800,\n    height: 800,\n    alwaysOnTop: true,\n  };\n\n  return context('authWindow', {\n    login: async (pair) => {\n      return new Promise((resolve, reject) => {\n        const auth0AuthorizeURL = `https://${config.auth0.domain}/authorize?` + qs.stringify({\n          audience: config.auth0.audience,\n          scope: config.auth0.scopes,\n          response_type: 'code',\n          client_id: config.auth0.clientId,\n          code_challenge: pair.challenge,\n          code_challenge_method: 'S256',\n          redirect_uri: `https://${config.auth0.domain}/result`,\n          ...config.login?.authorizeParams\n        });\n        const loginWindow = new BrowserWindow({\n          ...baseWindowConfig,\n          title: 'Login',\n          ...config.login?.windowConfig,\n        });\n\n        loginWindow.webContents.on('did-navigate', (event, href) => {\n          const location = url.parse(href);\n          if (location.pathname == '/result') {\n            const query = qs.parse(location.search || '', {ignoreQueryPrefix: true});\n            resolve(query.code);\n            loginWindow.destroy();\n          }\n        });\n\n        loginWindow.on('close', () => {\n          reject('Auth flow is rejected');\n        });\n\n        loginWindow.loadURL(auth0AuthorizeURL);\n      });\n    },\n    logout: async () => {\n      return new Promise((resolve, reject) => {\n        let timeoutRef: NodeJS.Timeout | null = null;\n        const logoutWindow = new BrowserWindow({\n          ...baseWindowConfig,\n          title: 'Log out',\n          skipTaskbar: true,\n          show: false,\n          frame: false,\n          ...config.logout?.windowConfig,\n        });\n\n        logoutWindow.webContents.on('did-navigate', () => {\n          logoutWindow.destroy();\n          if (timeoutRef) {\n            clearTimeout(timeoutRef)\n          }\n          resolve();\n        });\n\n        logoutWindow.loadURL(`https://${config.auth0.domain}/v2/logout`);\n        timeoutRef = setTimeout(() => {\n          reject(new Error('Logout time out'))\n        }, 60 * 1_000);\n      });\n    }\n  })\n}\n\nexport default authWindowAdapter;\n","import { Adapter, IContext, IOperation } from './types';\n\nexport function mergeAdapters(...adapters: Adapter[]): Adapter {\n  return (config) => {\n    return adapters.reduce((hashMap, adapter) => ({\n      ...hashMap,\n      ...adapter(config),\n    }), {} as IContext)\n  };\n}\n\nexport function $applyContext(ctx: IContext) {\n  return function <I, O>(op: IOperation<I, O>): I extends unknown ? () => O : (input: I) => O {\n    return ((input: I) => op(ctx, input)) as any;\n  }\n}\n\n\nexport const context = <K extends keyof IContext>(contextKey: K, vl: IContext[K]) => ({\n  [contextKey]: vl,\n});\n","import crypto from 'crypto';\nimport { Adapter, PKCEPair } from '../types';\nimport { context } from '../utils';\n\nfunction base64URLEncode(str: string) {\n  return str\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_')\n    .replace(/=/g, '');\n}\n\nfunction base64hash(str: string) {\n  return crypto.createHash('sha256').update(str).digest().toString('base64');\n}\n\nfunction createBase64Random(bytes: number) {\n  return crypto.randomBytes(bytes).toString('base64');\n}\n\nconst cryptographyAdapter: Adapter = (config) => {\n  return context('cryptography', {\n    getPKCEChallengePair: () => {\n      const seed = createBase64Random(32);\n      const verifier = base64URLEncode(seed);\n      const challenge = base64URLEncode(base64hash(verifier));\n      return { verifier, challenge };\n    }\n  });\n}\n\nexport default cryptographyAdapter;\n","import { Adapter, ITokenResponse } from '../types';\nimport { context } from '../utils';\n\nconst epochSeconds = () => Date.now() / 1000;\n\nconst tokensAdapter: Adapter = () => {\n  let tokenResponse: ITokenResponse | null = null;\n  let expiredAt: number | null;\n\n  return context('tokens', {\n    async get() {\n      return tokenResponse;\n    },\n    async set(value) {\n      tokenResponse = value;\n      expiredAt = epochSeconds() + value.expires_in;\n    },\n    async delete() {\n      tokenResponse = null;\n    },\n    expiredIn: () => {\n      if (expiredAt) return expiredAt - epochSeconds();\n      return Infinity;\n    }\n  });\n}\n\nexport default tokensAdapter;\n","import got from 'got';\nimport { Adapter } from '../types';\nimport { context } from '../utils';\n\nconst authAPIAdapter: Adapter = (config) => {\n  return context('authAPI', {\n    exchangeAuthCode: (authCode, pair) => got.post(`https://${config.auth0.domain}/oauth/token`, {\n      json: {\n        grant_type: 'authorization_code',\n        client_id: config.auth0.clientId,\n        code_verifier: pair.verifier,\n        code: authCode,\n        redirect_uri: `https://${config.auth0.domain}/result`\n      }\n    }).json(),\n    getProfile: (accessToken) => got(`https://${config.auth0.domain}/userinfo`, { headers: { 'Authorization': `Bearer ${accessToken}` } }).json()\n  })\n};\n\n\nexport default authAPIAdapter;\n","import { IContext, IProfile } from '../types';\n\nasync function login(ctx: IContext): Promise<string> {\n  /**\n   * generate pair\n   * get authorize code\n   * get exchange access token by auth code\n   * set token to cache\n   * return token;\n   */\n  const {\n    cryptography,\n    authWindow,\n    authAPI,\n    tokens,\n  } = ctx;\n  const pair = cryptography.getPKCEChallengePair();\n  const authCode = await authWindow.login(pair);\n  const token = await authAPI.exchangeAuthCode(authCode, pair);\n  tokens.set(token);\n  return token.access_token;\n}\n\nasync function getToken(ctx: IContext): Promise<string> {\n  const { tokens } = ctx;\n\n  const token = await tokens.get();\n  if (token && tokens.expiredIn() > 60) {\n    return token.access_token;\n  }\n  \n  return login(ctx);\n}\n\nasync function logout(ctx: IContext): Promise<void> {\n  const {\n    authWindow: { logout },\n    tokens,\n  } = ctx;\n\n  await Promise.all([tokens.delete(), logout()]);\n}\n\nasync function getProfile(ctx: IContext): Promise<IProfile | null> {\n  const {\n    tokens,\n    authAPI,\n  } = ctx;\n\n  const token = await tokens.get();\n  if (!token) return null;\n  return authAPI.getProfile(token.access_token);\n}\n\nexport {\n  login,\n  logout,\n  getToken,\n  getProfile,\n};\n","import { Adapter, IConfig } from '../types';\nimport { $applyContext } from '../utils';\nimport { IContext } from '../types';\nimport { getToken, getProfile, login, logout } from './handlers';\n  \nfunction initLibrary(adapter: Adapter, config: IConfig) {\n  const applyContext = $applyContext(adapter(config) as IContext);\n\n  return {\n    getToken: applyContext(getToken),\n    getProfile: applyContext(getProfile),\n    login: applyContext(login),\n    logout: applyContext(logout),\n  };\n}\n\nexport default initLibrary;\n"],"mappings":"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","names":["qs","url","crypto","got","logout"]}