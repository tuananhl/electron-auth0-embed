{"version":3,"sources":["../src/index.ts","../src/adapters/authWindow.ts","../src/utils.ts","../src/adapters/cryptography.ts","../src/adapters/tokens.ts","../src/adapters/authAPI.ts","../src/library/handlers.ts","../src/library/index.ts"],"sourcesContent":["import authWindowAdapter from './adapters/authWindow';\nimport cryptographyAdapter from './adapters/cryptography';\nimport tokensAdapter from './adapters/tokens';\nimport authAPIAdapter from './adapters/authAPI';\nimport { IConfig } from './types';\nimport { mergeAdapters } from './utils';\nimport initLibrary from './library/index';\n\nexport default function authConfig(config: IConfig) {\n  const adapter = mergeAdapters(\n    authWindowAdapter,\n    cryptographyAdapter,\n    tokensAdapter,\n    authAPIAdapter\n  );\n\n  return initLibrary(adapter, config);\n}","import { BrowserWindow, BrowserWindowConstructorOptions } from 'electron';\nimport qs from 'qs';\nimport url from 'url';\nimport { Adapter } from '../types';\nimport { context } from '../utils';\n\nconst authWindowAdapter: Adapter = (config) => {\n  const baseWindowConfig: BrowserWindowConstructorOptions = {\n    width: 800,\n    height: 800,\n    alwaysOnTop: true,\n  };\n\n  return context('authWindow', {\n    login: async (pair) => {\n      return new Promise((resolve, reject) => {\n        const auth0AuthorizeURL = `https://${config.auth0.domain}/authorize?` + qs.stringify({\n          audience: config.auth0.audience,\n          scope: config.auth0.scopes,\n          response_type: 'code',\n          client_id: config.auth0.clientId,\n          code_challenge: pair.challenge,\n          code_challenge_method: 'S256',\n          redirect_uri: `https://${config.auth0.domain}/mobile`,\n          ...config.login?.authorizeParams\n        });\n        const loginWindow = new BrowserWindow({\n          ...baseWindowConfig,\n          title: 'Login',\n          ...config.login?.windowConfig,\n        });\n\n        loginWindow.webContents.on('did-navigate', (event, href) => {\n          const location = url.parse(href);\n          if (location.pathname == '/mobile') {\n            const query = qs.parse(location.search || '', {ignoreQueryPrefix: true});\n            resolve(query.code);\n            loginWindow.destroy();\n          }\n        });\n\n        loginWindow.on('close', () => {\n          reject('Auth flow is rejected');\n        });\n\n        loginWindow.loadURL(auth0AuthorizeURL);\n      });\n    },\n    logout: async () => {\n      return new Promise((resolve, reject) => {\n        let timeoutRef: NodeJS.Timeout | null = null;\n        const logoutWindow = new BrowserWindow({\n          ...baseWindowConfig,\n          title: 'Log out',\n          skipTaskbar: true,\n          show: false,\n          frame: false,\n          ...config.logout?.windowConfig,\n        });\n\n        logoutWindow.webContents.on('did-navigate', () => {\n          logoutWindow.destroy();\n          if (timeoutRef) {\n            clearTimeout(timeoutRef)\n          }\n          resolve();\n        });\n\n        logoutWindow.loadURL(`https://${config.auth0.domain}/v2/logout`);\n        timeoutRef = setTimeout(() => {\n          reject(new Error('Logout time out'))\n        }, 60 * 1_000);\n      });\n    }\n  })\n}\n\nexport default authWindowAdapter;\n","import { Adapter, IContext, IOperation } from './types';\n\nexport function mergeAdapters(...adapters: Adapter[]): Adapter {\n  return (config) => {\n    return adapters.reduce((hashMap, adapter) => ({\n      ...hashMap,\n      ...adapter(config),\n    }), {} as IContext)\n  };\n}\n\nexport function $applyContext(ctx: IContext) {\n  return function <I, O>(op: IOperation<I, O>): I extends unknown ? () => O : (input: I) => O {\n    return ((input: I) => op(ctx, input)) as any;\n  }\n}\n\n\nexport const context = <K extends keyof IContext>(contextKey: K, vl: IContext[K]) => ({\n  [contextKey]: vl,\n});\n","import crypto from 'crypto';\nimport { Adapter, PKCEPair } from '../types';\nimport { context } from '../utils';\n\nfunction base64URLEncode(str: string) {\n  return str\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_')\n    .replace(/=/g, '');\n}\n\nfunction base64hash(str: string) {\n  return crypto.createHash('sha256').update(str).digest().toString('base64');\n}\n\nfunction createBase64Random(bytes: number) {\n  return crypto.randomBytes(bytes).toString('base64');\n}\n\nconst cryptographyAdapter: Adapter = (config) => {\n  return context('cryptography', {\n    getPKCEChallengePair: () => {\n      const seed = createBase64Random(32);\n      const verifier = base64URLEncode(seed);\n      const challenge = base64URLEncode(base64hash(verifier));\n      return { verifier, challenge };\n    }\n  });\n}\n\nexport default cryptographyAdapter;\n","import { Adapter, ITokenResponse } from '../types';\nimport { context } from '../utils';\n\nconst epochSeconds = () => Date.now() / 1000;\n\nconst tokensAdapter: Adapter = () => {\n  let tokenResponse: ITokenResponse | null = null;\n  let expiredAt: number | null;\n\n  return context('tokens', {\n    async get() {\n      return tokenResponse;\n    },\n    async set(value) {\n      tokenResponse = value;\n      expiredAt = epochSeconds() + value.expires_in;\n    },\n    async delete() {\n      tokenResponse = null;\n    },\n    expiredIn: () => {\n      if (expiredAt) return expiredAt - epochSeconds();\n      return Infinity;\n    }\n  });\n}\n\nexport default tokensAdapter;\n","import { Adapter } from '../types';\nimport { context } from '../utils';\n\nconst authAPIAdapter: Adapter = (config) => {\n  return context('authAPI', {\n    exchangeAuthCode: (authCode, pair) => fetch(`https://${config.auth0.domain}/oauth/token`, {\n      method: 'POST',\n      body: JSON.stringify({\n        grant_type: 'authorization_code',\n        client_id: config.auth0.clientId,\n        code_verifier: pair.verifier,\n        code: authCode,\n        redirect_uri: `https://${config.auth0.domain}/mobile`\n      }),\n    }).then((response: Response) => response.json()),\n    getProfile: (accessToken) => fetch(`https://${config.auth0.domain}/userinfo`, { headers: { 'Authorization': `Bearer ${accessToken}` } }).then((response) => response.json())\n  })\n};\n\n\nexport default authAPIAdapter;\n","import { IContext, IProfile } from '../types';\n\nasync function login(ctx: IContext): Promise<string> {\n  /**\n   * generate pair\n   * get authorize code\n   * get exchange access token by auth code\n   * set token to cache\n   * return token;\n   */\n  const {\n    cryptography,\n    authWindow,\n    authAPI,\n    tokens,\n  } = ctx;\n  const pair = cryptography.getPKCEChallengePair();\n  const authCode = await authWindow.login(pair);\n  const token = await authAPI.exchangeAuthCode(authCode, pair);\n  tokens.set(token);\n  return token.access_token;\n}\n\nasync function getToken(ctx: IContext): Promise<string> {\n  const { tokens } = ctx;\n\n  const token = await tokens.get();\n  if (token && tokens.expiredIn() > 60) {\n    return token.access_token;\n  }\n  \n  return login(ctx);\n}\n\nasync function logout(ctx: IContext): Promise<void> {\n  const {\n    authWindow: { logout },\n    tokens,\n  } = ctx;\n\n  await Promise.all([tokens.delete(), logout()]);\n}\n\nasync function getProfile(ctx: IContext): Promise<IProfile | null> {\n  const {\n    tokens,\n    authAPI,\n  } = ctx;\n\n  const token = await tokens.get();\n  if (!token) return null;\n  return authAPI.getProfile(token.access_token);\n}\n\nexport {\n  login,\n  logout,\n  getToken,\n  getProfile,\n};\n","import { Adapter, IConfig } from '../types';\nimport { $applyContext } from '../utils';\nimport { IContext } from '../types';\nimport { getToken, getProfile, login, logout } from './handlers';\n  \nfunction initLibrary(adapter: Adapter, config: IConfig) {\n  const applyContext = $applyContext(adapter(config) as IContext);\n\n  return {\n    getToken: applyContext(getToken),\n    getProfile: applyContext(getProfile),\n    login: applyContext(login),\n    logout: applyContext(logout),\n  };\n}\n\nexport default initLibrary;\n"],"mappings":"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","names":["index_exports","__export","authConfig","__toCommonJS","import_electron","import_qs","import_url","mergeAdapters","adapters","config","hashMap","adapter","$applyContext","ctx","op","input","context","contextKey","vl","authWindowAdapter","config","baseWindowConfig","context","pair","resolve","reject","_a","_b","auth0AuthorizeURL","qs","loginWindow","event","href","location","url","query","timeoutRef","logoutWindow","authWindow_default","import_crypto","base64URLEncode","str","base64hash","crypto","createBase64Random","bytes","cryptographyAdapter","config","context","seed","verifier","challenge","cryptography_default","epochSeconds","tokensAdapter","tokenResponse","expiredAt","context","value","tokens_default","authAPIAdapter","config","context","authCode","pair","response","accessToken","authAPI_default","login","ctx","cryptography","authWindow","authAPI","tokens","pair","authCode","token","getToken","logout","getProfile","initLibrary","adapter","config","applyContext","$applyContext","getToken","getProfile","login","logout","library_default","authConfig","config","adapter","mergeAdapters","authWindow_default","cryptography_default","tokens_default","authAPI_default","library_default"]}